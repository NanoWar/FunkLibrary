#ifndef funk_functions_screen_included
#define funk_functions_screen_included
;
; funk screen functions
; by Robert Kuhfss
;
.nomodule


;============================================
;	> funk autosprite (ram caller)
;============================================
#ifdef funk_autoSprite_usage
#ifdef funk_setupRamCalls ; 2+ page app
.funkSetupRam "funk_autoSprite"
funk_autoSprite.begin
	#define funk_swap_usage
	call	funk_swap
	jp	funk_autoSprite.code
funk_autoSprite.end
#endif ; funk_setupRamCalls
#endif ; funk_autoSprite_usage


;============================================
;	> funk largeSprite (ram caller)
;============================================
#ifdef funk_largeSprite_usage
#ifdef funk_setupRamCalls ; 2+ page app
.funkSetupRam "funk_largeSprite"
funk_largeSprite.begin
	#define funk_swap_usage
	call	funk_swap
	jp	funk_largeSprite.code
funk_largeSprite.end
#endif ; funk_setupRamCalls
#endif ; funk_largeSprite_usage


;============================================
;	> funk smallSprite (ram caller)
;============================================
#ifdef funk_smallSprite_usage
#ifdef funk_setupRamCalls ; 2+ page app
.funkSetupRam "funk_smallSprite"
funk_smallSprite.begin
	#define funk_swap_usage
	call	funk_swap
	jp	funk_smallSprite.code
funk_smallSprite.end
#endif ; funk_setupRamCalls
#endif ; funk_smallSprite_usage


;============================================
; UPDATE
;============================================
; Copies the gbuf to the screen
;--------------------------------------------
#ifdef funk_update_usage
.addinstr IN F,(C) 70ED	2 NOP	1
;--------------------------------------------
funk_update
	ld	hl, gbuf
	ld	c, $10
	ld	a, $80
funk_update.setrow
	in	f, (c)
	jp	m, funk_update.setrow
	out	($10), a
	ld	de, 12
	ld	a, $20
funk_update.col
	in	f, (c)
	jp	m, funk_update.col
	out	($10), a
	push	af
	ld	b, 64
funk_update.row
	ld	a, (hl)
funk_update.rowwait
	in	f, (c)
	jp	m, funk_update.rowwait
	out	($11), a
	add	hl, de
	djnz	funk_update.row
	pop	af
	dec	h
	dec	h
	dec	h
	inc	hl
	inc	a
	cp	$2C
	jp	nz, funk_update.col
	ret
#ifdef bleh
	di
	ld	a, $80
	out	($10), a
	ld	hl, gbuf -12 -( -(12 * 64) + 1)
	ld	a, $20
	ld	c, a
	inc	hl
	dec	hl
funk_update.loop1
	ld	b, 64
	inc	c
	ld	de, -(12 * 64) + 1
	out	($10), a
	add	hl, de
	ld	de, 10
funk_update.loop2
	add	hl, de
	inc	hl
	inc	hl
	inc	de
	ld	a, (hl)
	out	($11), a
	dec	de
	djnz	funk_update.loop2
	ld	a, c
	cp	$2B + 1
	jr	nz, funk_update.loop1
	ret
#endif
;--------------------------------------------
.debug "Included 'funk_update' (", $ - funk_update, " bytes)"
#endif


;============================================
; CLEAR
;============================================
#ifdef funk_clear_usage
funk_clear
	puAll
	fill	gbuf, 768, white
	poAll
	ret
.debug "Included 'funk_clear'"
#endif


;============================================
; INVERT
;============================================
#ifdef funk_invert_usage
funk_invert
	ld	bc, 768
	ld	hl, gbuf
_
	ld	a, (hl)
	cpl
	ld	(hl), a
	inc	hl
	dec	bc
	ld	a, c
	or	b
	jr	nz, -_
	ret
.debug "Included 'funk_invert'"
#endif


;============================================
; RECT
;============================================
; Draws a new rectangle
;--------------------------------------------
; input:	l = y position (down)
;		a = x position (right)
;		b = height
;		c = length
;--------------------------------------------
#ifdef funk_rectangle_usage
.module "rectangle"
.var "scanline1"
.var "scanline2"
.var "scanline3"
;--------------------------------------------
funk_rectangle
	ld	h, a
	push	hl
	push	bc
	call	rectangle.calc
	pop	bc
	pop	hl
rectangle.display
; inputs: h=X, l=Y, b=height
; scanline[1..3]
	ld	a, h
	ld	e, l
	ld	h, $00
	ld	d, h
	add	hl, de
	add	hl, de
	add	hl, hl
	add	hl, hl	;l*12
	ld	e, a
	srl	e
	srl	e
	srl	e	;x/8
	add	hl, de
	ld	de, gbuf
	add	hl, de
rectangle.display.loop:
	push	bc
	push	hl
		ld	a, (hl)
		ld	c, a
		ld	a, (rectangle.scanline1)
		xor	c
		ld	(hl), a
		inc	hl
		ld	a, (rectangle.scanline2)
		or	a
		jr	z, rectangle.display.noloop2
		ld	b, a
rectangle.display.loop2:
		ld	a, (hl)
		xor	$FF
		ld	(hl), a
		inc	hl
		djnz	rectangle.display.loop2
rectangle.display.noloop2:
		ld	a, (hl)
		ld	c, a
		ld	a, (rectangle.scanline3)
		xor	c
		ld	(hl), a
	pop	hl
	pop	bc
	ld	de, 12
	add	hl, de
	djnz	rectangle.display.loop
	ret
;--------------------------------------------
rectangle.calc
; Calculates a new rectangle
;--------------------------------------------
; input:	a = x
; 		b = height
;		c = length
;--------------------------------------------
	ld	d, a
		ld	a, $FF
		ld	(rectangle.scanline1), a
		xor	a
		ld	(rectangle.scanline2), a
		ld	(rectangle.scanline3), a
	ld	a, d
	and 	7
	ld	d, a
		or	a
		jr	z, rectangle.skipShift1
		ld	e, $FF
rectangle.shift1
		srl	e
		dec	a
		or	a
		jr	nz, rectangle.shift1
		ld	a, e
		ld	(rectangle.scanline1), a
rectangle.skipShift1
	ld	a, d	; a = shift right
	ld	h, a	; save
		add	a, c	; a + c
		ld	b, a	; save b = a + c
		and	7	; /8 Rest?
		ld	d, a	; Rest
		ld	a, 8
		sub	d	; 8 - Rest
		ld	d, a	; = d
		ld	e, $FF
rectangle.shift2
		sla	e
		dec	a
		or	a
		jr	nz, rectangle.shift2
		ld	a, e
		ld	(rectangle.scanline3), a
		ld	a, 16
	ld	e, h	; a
	sub	e	; 16 - a
	sub	d	; -d
	srl	a
	srl	a
	srl	a
	ld	d, a
	;
	ld	a, c
	srl	a
	srl	a
	srl	a	; /8
	sub	d
	ld	d, a
	ld	a, (rectangle.scanline2)
	add	a, d
	ld	(rectangle.scanline2), a
	;
	ld	a, b
	and	%11111000
	or	a	; if (shift_right + length)<8, do (rectangle.scanline1 & rectangle.scanline3)
	ret	nz
	ld	a, (rectangle.scanline1)
	ld	d, a
	ld	a, (rectangle.scanline3)
	and	d
	ld	(rectangle.scanline1), a
	xor	a
	ld	(rectangle.scanline2), a
	ld	(rectangle.scanline3), a
	ret
;--------------------------------------------
.debug "Included 'funk_rectangle' (", $ - funk_rectangle, " bytes)"
#endif


#endif ; funk_functions_screen_included
