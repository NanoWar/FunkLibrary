#ifndef funk_macros_var_included
#define funk_macros_var_included
;
; Variable memory allocation macros
; by Robert Kuhfss
;


;============================================
; .varloc POINTER, [SIZE]
;============================================
#macro _varLocate( _varLocate_pointer, _varLocate_size )
	#define var_pointer eval( _varLocate_pointer )
	#define var_start eval( _varLocate_pointer )
	#ifdef _varLocate_size
		#define var_size eval( _varLocate_size)
	#endif
	#define var_lastSize 0
	#undef var_overflow
#endmacro
#define .varloc _varLocate(


;============================================
; .var NAME, [SIZE=1]
;============================================
#macro _varAdd( @_varAdd_name, _varAdd_size )
	#ifndef var_pointer
		#define var_pointer 0
	#endif
	#ifndef _varAdd_size
		#define _varAdd_size 1
	#endif
	#define _varAdd_name concat("\"", _varAdd_name, "\"")
	#ifdef funk_module
		#define _varAdd_name funk_module, ".", _varAdd_name
	#endif
	.parse "#define ", _varAdd_name, " ", var_pointer
; 	.debug var_pointer, " > ", _varAdd_name
	; Increase pointer
	#define var_pointer eval( var_pointer + _varAdd_size )
	#define var_lastSize eval( _varAdd_size )
	; Check for overflow
	#ifdef var_size
		#ifndef var_overflow
			#if var_pointer - var_start > var_size
				.err "Var overflow at ", _varAdd_name
				#define var_overflow
			#endif
		#endif
	#endif
#endmacro
#define .var _varAdd(


;============================================
; .free NAME, [DECREASE_FLAG]
;============================================
#macro _varFree( @_varFree_name, _varFree_decrease )
	#define _varFree_name concat( "\"", _varFree_name, "\"" )
	#ifdef _varFree_decrease
		#define _varFree_pointer eval( var_pointer - var_lastSize )
	#else
		#define _varFree_pointer eval( var_pointer )
	#endif
	#ifdef funk_module
		.parse "#define ", funk_module, ".", _varFree_name, " ", _varFree_pointer
	#else
		.parse "#define ", _varFree_name, " ", _varFree_pointer
	#endif
	#undef _varFree_pointer
#endmacro
#define .free _varFree(


; DEPRECATED
;============================================
; .varEnd [MAX]
;============================================
#macro _varEnd( _varEnd_size )
	#ifdef _varEnd_size
		#define _var_used eval( var_pointer - var_start )
		#if _var_used > _varEnd_size
			.err "Var overflow by ", _var_used - _varEnd_size
		#else
			.debug "Var used ", _var_used, " bytes."
		#endif
	#endif
	#undef var_pointer
#endmacro
#define .varEnd _varEnd(


#endif ; funk_macros_var_included
